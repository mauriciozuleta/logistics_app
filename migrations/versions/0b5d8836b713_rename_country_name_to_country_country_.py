"""Rename Country.name to Country.country_name

Revision ID: 0b5d8836b713
Revises: 921c9aa54199
Create Date: 2025-07-28 14:01:25.837344

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0b5d8836b713'
down_revision = '921c9aa54199'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table('countries', schema=None) as batch_op:
        # Only alter country_code type if needed
        batch_op.alter_column('country_code',
               existing_type=sa.VARCHAR(length=5),
               type_=sa.String(length=10),
               existing_nullable=False)
        # Rename 'name' to 'country_name' if 'name' exists and 'country_name' does not
        # Alembic/SQLite does not support column rename directly, so this is a placeholder for manual migration if needed
        # batch_op.alter_column('name', new_column_name='country_name')
        pass  # No-op for safety; handle manually if needed

    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.alter_column('country_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=10),
               existing_nullable=True)
        # Drop and recreate foreign key with explicit name
        batch_op.drop_constraint('fk_products_country_id_countries', type_='foreignkey')
        batch_op.create_foreign_key('fk_products_country_id_countries', 'countries', ['country_id'], ['country_code'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.drop_constraint('fk_products_country_id_countries', type_='foreignkey')
        batch_op.create_foreign_key('fk_products_country_id_countries', 'countries', ['country_id'], ['country_code'])
        batch_op.alter_column('country_id',
               existing_type=sa.String(length=10),
               type_=sa.INTEGER(),
               existing_nullable=True)

    with op.batch_alter_table('countries', schema=None) as batch_op:
        # Reverse the country_code type change
        batch_op.alter_column('country_code',
               existing_type=sa.String(length=10),
               type_=sa.VARCHAR(length=5),
               existing_nullable=False)
        # Rename 'country_name' back to 'name' if needed (manual step for SQLite)
        pass  # No-op for safety; handle manually if needed

    # ### end Alembic commands ###
